{
    "language": "Solidity",
    "sources": {
        "./contracts/contracts/libraries/Base64.sol": {
            "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/// [MIT License]\n/// @title Base64\n/// @notice Provides a function for encoding some bytes in base64\n/// @author Brecht Devos <brecht@loopring.org>\nlibrary Base64 {\n    bytes internal constant TABLE =\n        \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n\n    /// @notice Encodes some bytes to the base64 representation\n    function encode(bytes memory data) internal pure returns (string memory) {\n        uint256 len = data.length;\n        if (len == 0) return \"\";\n\n        // multiply by 4/3 rounded up\n        uint256 encodedLen = 4 * ((len + 2) / 3);\n\n        // Add some extra buffer at the end\n        bytes memory result = new bytes(encodedLen + 32);\n\n        bytes memory table = TABLE;\n\n        assembly {\n            let tablePtr := add(table, 1)\n            let resultPtr := add(result, 32)\n\n            for {\n                let i := 0\n            } lt(i, len) {\n\n            } {\n                i := add(i, 3)\n                let input := and(mload(add(data, i)), 0xffffff)\n\n                let out := mload(add(tablePtr, and(shr(18, input), 0x3F)))\n                out := shl(8, out)\n                out := add(\n                    out,\n                    and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF)\n                )\n                out := shl(8, out)\n                out := add(\n                    out,\n                    and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF)\n                )\n                out := shl(8, out)\n                out := add(\n                    out,\n                    and(mload(add(tablePtr, and(input, 0x3F))), 0xFF)\n                )\n                out := shl(224, out)\n\n                mstore(resultPtr, out)\n\n                resultPtr := add(resultPtr, 4)\n            }\n\n            switch mod(len, 3)\n            case 1 {\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\n            }\n            case 2 {\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\n            }\n\n            mstore(result, encodedLen)\n        }\n\n        return string(result);\n    }\n}"
        },
        "./contracts/poc.sol": {
            "content": "// SPDX-License-Identifier: MIT\n/*\n    ____             _ __  _       _ __        ____        ________          _     \n   / __ \\____  _____(_) /_(_)   __(_) /___  __/ __ \\____  / ____/ /_  ____ _(_)___ \n  / /_/ / __ \\/ ___/ / __/ / | / / / __/ / / / / / / __ \\/ /   / __ \\/ __ `/ / __ \\\n / ____/ /_/ (__  ) / /_/ /| |/ / / /_/ /_/ / /_/ / / / / /___/ / / / /_/ / / / / /\n/_/    \\____/____/_/\\__/_/ |___/_/\\__/\\__, /\\____/_/ /_/\\____/_/ /_/\\__,_/_/_/ /_/ \n                                     /____/                                        \n*/\n\npragma solidity ^0.8.15;\n \nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {Base64} from \"./contracts/libraries/Base64.sol\";\n \ncontract positivityOnChain is ERC721URIStorage, Ownable {\n  uint256 numClaimed = 0;\n  \n  struct Metadata {\n    uint256 orig_score;\n    uint256 orig_pos_neg;\n    uint256 score;\n    uint256 pos_neg;\n    string username;\n    address minter;\n    string gradient;\n    bool animated;\n    string status;\n    Color color;\n    string attributesURI;\n    string baseURI;\n    string SVG;\n  }\n\n  struct Color {\n    uint256 r1;\n    uint256 g1;\n    uint256 b1;\n    uint256 r2;\n    uint256 g2;\n    uint256 b2;\n  }\n\n  struct Coupon {\n    bytes32 r;\n    bytes32 s;\n    uint8 v;\n  }\n\n  mapping(uint256 => Metadata) idToData;\n  mapping(string => uint256) userToId;\n  mapping(string => bool) alreadyMinted;\n  mapping(uint256 => string) updatedURI;\n  mapping(uint256 => bool) removed;\n  \n  string baseSvg1 = '<svg xmlns=\"http://www.w3.org/2000/svg\" preserveAspectRatio=\"xMinYMin meet\" viewBox=\"0 0 350 500\"><defs><linearGradient id=\"grad1\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\"><stop offset=\"0%\" style=\"stop-color:rgb(';\n  string baseSvg2 = ');stop-opacity:1\" /><stop offset=\"100%\" style=\"stop-color:rgb(';\n  string baseSvg3 = ');stop-opacity:1\" />';\n  string animate_Svg4 = '<animate attributeName=\"x2\" values=\"100%;0%;100%\" dur=\"10s\" repeatCount=\"indefinite\" />';\n  string baseSvg5 = '</linearGradient></defs><rect width=\"100%\" height=\"100%\" fill=\"rgb(232,228,214)\" rx=\"25\"/><ellipse cx=\"175\" cy=\"175\" rx=\"150\" ry=\"150\" fill=\"white\"/><ellipse cx=\"175\" cy=\"175\" rx=\"150\" ry=\"150\" fill=\"url(#grad1)\" /><text fill=\"#ffffff\" font-size=\"55\" font-family=\"Trebuchet MS\" x=\"50%\" y=\"175\" dominant-baseline=\"middle\" text-anchor=\"middle\">';\n\n  string baseSvg1_2 = '<svg xmlns=\"http://www.w3.org/2000/svg\" preserveAspectRatio=\"xMinYMin meet\" viewBox=\"0 0 350 500\"><defs><radialGradient id=\"grad1\" cx=\"50%\" cy=\"50%\" r=\"50%\" fx=\"50%\" fy=\"50%\"><stop offset=\"0%\" style=\"stop-color:rgb(';\n  string baseSvg2_2 = ');stop-opacity:0\" /><stop offset=\"100%\" style=\"stop-color:rgb(';\n  string animate_Svg4_2 = '<animate attributeName=\"r\" values=\"0%;100%;0%\" dur=\"10s\" repeatCount=\"indefinite\" />';\n  string baseSvg5_2 = '</radialGradient></defs><rect width=\"100%\" height=\"100%\" fill=\"rgb(232,228,214)\" rx=\"25\"/><ellipse cx=\"175\" cy=\"175\" rx=\"150\" ry=\"150\" fill=\"white\"/><ellipse cx=\"175\" cy=\"175\" rx=\"150\" ry=\"150\" fill=\"url(#grad1)\" /><text font-size=\"55\" font-family=\"Trebuchet MS\" x=\"50%\" y=\"175\" dominant-baseline=\"middle\" text-anchor=\"middle\">';\n  \n  string postScoreSvg = '</text><text font-size=\"45\" font-family=\"Trebuchet MS\" x=\"50%\" y=\"80%\" dominant-baseline=\"middle\" text-anchor=\"middle\">';\n\n  string lockedSvg = '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 350 500\"><rect width=\"100%\" height=\"100%\" fill=\"rgb(232,228,214)\" rx=\"25\" /><path transform=\"translate(130, 110)\" d=\"M2.892,56.036h8.959v-1.075V37.117c0-10.205,4.177-19.484,10.898-26.207v-0.009 C29.473,4.177,38.754,0,48.966,0C59.17,0,68.449,4.177,75.173,10.901l0.01,0.009c6.721,6.723,10.898,16.002,10.898,26.207v17.844 v1.075h7.136c1.59,0,2.892,1.302,2.892,2.891v61.062c0,1.589-1.302,2.891-2.892,2.891H2.892c-1.59,0-2.892-1.302-2.892-2.891 V58.927C0,57.338,1.302,56.036,2.892,56.036L2.892,56.036z M26.271,56.036h45.387v-1.075V36.911c0-6.24-2.554-11.917-6.662-16.03 l-0.005,0.004c-4.111-4.114-9.787-6.669-16.025-6.669c-6.241,0-11.917,2.554-16.033,6.665c-4.109,4.113-6.662,9.79-6.662,16.03 v18.051V56.036L26.271,56.036z M49.149,89.448l4.581,21.139l-12.557,0.053l3.685-21.423c-3.431-1.1-5.918-4.315-5.918-8.111 c0-4.701,3.81-8.511,8.513-8.511c4.698,0,8.511,3.81,8.511,8.511C55.964,85.226,53.036,88.663,49.149,89.448L49.149,89.448z\"/><text font-size=\"45\" font-family=\"Trebuchet MS\" x=\"50%\" y=\"80%\" dominant-baseline=\"middle\" text-anchor=\"middle\">Token Locked</text></svg>';\n  \n  address private adminSigner; \n\n  uint256 private mintPrice = 0.02 ether;\n  uint256 private updatePrice = 0.01 ether;\n\n  constructor(address _adminSigner) ERC721 (\"PositivityOnChain\", \"POC\") {\n    adminSigner = _adminSigner;\n  }\n\n  function updateAdminSigner(address _new) public onlyOwner {\n    adminSigner = _new;\n  }\n\n  function updateSVG(string memory _baseSvg1, string memory _baseSvg2, string memory _baseSvg3, string memory _animate_Svg4, string memory _baseSvg5, string memory _baseSvg1_2, string memory _baseSvg2_2, string memory _animate_Svg4_2, string memory _baseSvg5_2, string memory _postScoreSvg, string memory _lockedSvg) public onlyOwner {\n    baseSvg1 = _baseSvg1;\n    baseSvg2 = _baseSvg2;\n    baseSvg3 = _baseSvg3;\n    animate_Svg4 = _animate_Svg4;\n    baseSvg5 = _baseSvg5;\n    baseSvg1_2 = _baseSvg1_2;\n    baseSvg2_2 = _baseSvg2_2;\n    animate_Svg4_2 = _animate_Svg4_2;\n    baseSvg5_2 = _baseSvg5_2;\n    postScoreSvg = _postScoreSvg;\n    lockedSvg = _lockedSvg;\n  }\n\n  function setColors(uint256 id) internal view returns (Color memory color) {\n    uint256 pos_neg = idToData[id].pos_neg;\n    uint256 score = idToData[id].score;\n    if (pos_neg != 1) {\n      if (score >= 500) {\n        color.r1 = randRange(205,255,score,id);\n        color.g1 = randRange(200,215,score,id);\n        color.b1 = randRange(0,30,score,id);\n        color.r2 = randRange(188,200,score,id);\n        color.g2 = randRange(187,200,score,id);\n        color.b2 = randRange(186,200,score,id);\n      } else if (score > 200 && score < 500) {\n          color.r1 = randRange(150,255,score,id);\n          color.g1 = randRange(151,255,score,id);\n          color.b1 = randRange(152,255,score,id);\n          color.r2 = randRange(149,255,score,id);\n          color.g2 = randRange(148,255,score,id);\n          color.b2 = randRange(153,255,score,id);\n      } else {\n          color.r1 = randRange(51,150,score,id);\n          color.g1 = randRange(49,149,score,id);\n          color.b1 = randRange(52,148,score,id);\n          color.r2 = randRange(53,147,score,id);\n          color.g2 = randRange(48,146,score,id);\n          color.b2 = randRange(57,145,score,id);\n      }\n    } else {\n        if (score >= 200) { \n          color.r1 = randRange(0,5,score,id);\n          color.g1 = randRange(1,6,score,id);\n          color.b1 = randRange(0,9,score,id);\n          color.r2 = randRange(125,150,score,id);\n          color.g2 = randRange(0,5,score,id);\n          color.b2 = randRange(0,9,score,id);\n        } else if (score < 200 && score > 75) {\n            color.r1 = randRange(0,50,score,id);\n            color.g1 = randRange(1,49,score,id);\n            color.b1 = randRange(2,48,score,id);\n            color.r2 = randRange(3,47,score,id);\n            color.g2 = randRange(4,46,score,id);\n            color.b2 = randRange(5,45,score,id);\n        } else {\n            color.r1 = randRange(50,100,score,id);\n            color.g1 = randRange(51,100,score,id);\n            color.b1 = randRange(52,100,score,id);\n            color.r2 = randRange(53,100,score,id);\n            color.g2 = randRange(54,100,score,id);\n            color.b2 = randRange(55,100,score,id);\n        }\n    }\n  }\n  \n  function randRange(uint256 lowerBound, uint256 upperBound, uint256 score, uint256 id) internal view returns (uint256) {\n    uint256 randomNumber = uint(keccak256(abi.encodePacked(this, id, score))) % (upperBound - lowerBound + 1);\n    return randomNumber += lowerBound;\n  }\n\n  function updatePrices(uint256 _mintPrice, uint256 _updatePrice) public onlyOwner {\n    mintPrice = _mintPrice;\n    updatePrice = _updatePrice;\n  }\n\n  function purchase(uint256 score, uint256 pos_neg, string memory username, Coupon memory coupon) public payable {\n    //pos_neg: 0 for positive, 1 for negative\n    require(!alreadyMinted[username], \"Already minted\");\n    require(msg.value >= mintPrice, \"Not enough eth\");\n\n    bytes32 digest = keccak256(abi.encode(msg.sender,score,username,pos_neg));\n    require(_isVerifiedCoupon(digest, coupon), \"Invalid coupon\");\n    \n    mintToken(msg.sender, score, pos_neg, username, msg.sender);\n  }\n  \n  function mintToken(address _to, uint256 score, uint256 pos_neg, string memory username, address _minter) internal {\n    uint256 tokenID = numClaimed + 1;\n    idToData[tokenID].score = score;\n    idToData[tokenID].orig_score = score;\n    idToData[tokenID].orig_pos_neg = pos_neg;\n    idToData[tokenID].pos_neg = pos_neg;\n    idToData[tokenID].username = username;\n    idToData[tokenID].minter = _minter;\n    userToId[username] = tokenID;\n    alreadyMinted[username] = true;\n    _safeMint(_to, tokenID);\n    numClaimed += 1;\n  }\n\n  function _isVerifiedCoupon(bytes32 digest, Coupon memory coupon) internal view returns (bool) {\n    address signer = ecrecover(digest, coupon.v, coupon.r, coupon.s);\n    require(signer != address(0), \"Invalid sig\");\n    return signer == adminSigner;\n  }\n  \n  function airdrop(address _to, uint256 score, uint256 pos_neg, string memory username) public onlyOwner {\n    require(!alreadyMinted[username], \"Already minted\");\n    mintToken(_to, score, pos_neg, username, _to);\n  }\n  \n  function updateToken(uint256 id, uint256 score, uint256 pos_neg, string memory username, Coupon memory coupon) public payable {\n    require(msg.value >= updatePrice, \"Not enough eth\");\n    require(ownerOf(id) == msg.sender, \"You must currently own this token\");\n    require(idToData[id].minter == msg.sender, \"Must use original minter address\");\n\n    bytes32 digest = keccak256(abi.encode(msg.sender,score,username,pos_neg));\n    require(_isVerifiedCoupon(digest, coupon), \"Invalid coupon\");\n\n    if (keccak256(abi.encodePacked((idToData[id].username))) != keccak256(abi.encodePacked((username)))) {\n      userToId[idToData[id].username] = 0;\n      alreadyMinted[idToData[id].username] = false;\n      userToId[username] = id;\n      idToData[id].username = username;\n      alreadyMinted[username] = true;\n    }\n\n    idToData[id].score = score;\n    idToData[id].pos_neg = pos_neg;\n  }\n\n  function toggleRemove(uint256 id) public onlyOwner {\n    removed[id] = !removed[id];\n  }\n\n  function adminUpdate(uint256 id, uint256 score, uint256 pos_neg, string memory username, address _minter, uint256 orig_score, uint256 orig_pos_neg) public onlyOwner {\n    idToData[id].score = score;\n    idToData[id].orig_score = orig_score;\n    idToData[id].orig_pos_neg = orig_pos_neg;\n    idToData[id].pos_neg = pos_neg;\n    idToData[id].minter = _minter;\n\n    if (keccak256(abi.encodePacked((idToData[id].username))) != keccak256(abi.encodePacked((username)))) {\n      userToId[idToData[id].username] = 0;\n      alreadyMinted[idToData[id].username] = false;\n      userToId[username] = id;\n      idToData[id].username = username;\n      alreadyMinted[username] = true;\n    }\n  }\n  \n  function removeUsername(string memory username) public onlyOwner {\n    alreadyMinted[username] = false;\n    userToId[username] = 0;\n  }\n\n  function checkUsername(string memory username) public view returns (bool) {\n    return alreadyMinted[username];\n  }\n\n  function usernameToScore(string memory username) public view returns (string memory readable_score, uint256 score, uint256 pos_neg, uint256 tokenID) {\n    require(userToId[username] > 0, \"Username does not have a score\");\n    score = idToData[userToId[username]].score;\n    pos_neg = idToData[userToId[username]].pos_neg;\n    tokenID = userToId[username];\n    if (pos_neg == 1) {\n      readable_score = string.concat('-',Strings.toString(idToData[userToId[username]].score));\n    } else {\n      readable_score = Strings.toString(idToData[userToId[username]].score);\n    }\n  }\n\n  function viewMetadata(uint256 id) public view returns (string memory username, string memory score, string memory original_score, address minter, string memory gradient, bool animated, string memory status, Color memory color) {\n    require(id < numClaimed + 1 && id != 0, \"Token does not exist\");\n    if (!removed[id]) {\n      Metadata memory attributes = getAttributes(id);\n      score = Strings.toString(idToData[id].score);\n      original_score = Strings.toString(idToData[id].orig_score);\n      if (idToData[id].pos_neg == 1) {\n        score = string.concat('-',score);\n      }\n      if (idToData[id].orig_pos_neg == 1) {\n        original_score = string.concat('-',original_score);\n      }\n      username = idToData[id].username;\n      minter = idToData[id].minter;\n      gradient = attributes.gradient;\n      animated = attributes.animated;\n      status = attributes.status;\n      color = attributes.color;\n    } else {\n      username = \"Token Locked\";\n    }\n  }\n\n  function viewSVG(uint256 id) public view returns (string memory) {\n    require(id < numClaimed + 1 && id != 0, \"Token does not exist\");\n    if (!removed[id]) {\n      return getAttributes(id).SVG;\n    } else {\n      return \"Token Locked\";\n    }\n  }\n\n  function getAttributes(uint256 id) internal view returns (Metadata memory attributes) {\n    uint256 score = idToData[id].score;\n    uint256 pos_neg = idToData[id].pos_neg;\n    string memory sign = 'positive';\n    attributes.gradient = 'linear';\n    attributes.status = 'Neutral';\n    string memory animate = 'false';\n    string memory orig_str_score = Strings.toString(idToData[id].orig_score);\n    if (idToData[id].orig_pos_neg == 1) {\n      orig_str_score = string.concat('-',orig_str_score);\n    }\n\n    string memory str_score = Strings.toString(idToData[id].score);\n\n    if (pos_neg == 0) {\n      if (score > 25 && score <= 75) {\n        attributes.status = 'Friendly';\n      } else if (score > 75 && score <= 115) {\n          attributes.status = 'Supportive';\n      } else if (score > 115 && score <= 175) {\n          attributes.status = 'Kindhearted';\n      } else if (score > 175 && score <= 300) {\n          attributes.status = 'Compassionate';\n      } else if (score > 300 && score <= 500) {\n          attributes.status = 'Altruistic';\n      } else if (score > 500) {\n          attributes.status = 'Loving';\n      }\n    } else {\n      str_score = string.concat('-',str_score);\n      sign = 'negative';\n      if (score > 25 && score <= 75) {\n        attributes.status = 'Stingy';\n      } else if (score > 75 && score <= 115) {\n          attributes.status = 'Heinous';\n      } else if (score > 115 && score <= 175) {\n          attributes.status = 'Spiteful';\n      } else if (score > 175 && score <= 300) {\n          attributes.status = 'Offensive';\n      } else if (score > 300 && score <= 500) {\n          attributes.status = 'Resentful';\n      } else if (score > 500) {\n          attributes.status = 'Evil';\n      }\n    }\n\n    attributes.color = setColors(id);\n    \n    string memory color1 = string.concat(Strings.toString(attributes.color.r1),',',Strings.toString(attributes.color.g1),',',Strings.toString(attributes.color.b1));\n    string memory color2 = string.concat(Strings.toString(attributes.color.r2),',',Strings.toString(attributes.color.g2),',',Strings.toString(attributes.color.b2));\n  \n    attributes.baseURI = string.concat(baseSvg1, color1, baseSvg2, color2, baseSvg3, baseSvg5);\n  \n    if (randRange(0,100,score,id) > 85) {\n      attributes.baseURI = string.concat(baseSvg1_2, color1, baseSvg2_2, color2, baseSvg3, baseSvg5_2);\n      attributes.gradient = 'radial';\n      if (randRange(1,101,score,id) > 99) {\n        attributes.baseURI = string.concat(baseSvg1_2, color1, baseSvg2_2, color2, baseSvg3, animate_Svg4_2, baseSvg5_2);\n        attributes.animated = true;\n        animate = 'true';\n      }\n    } else {\n        if (randRange(2,100,score,id) > 97) {\n          attributes.baseURI = string.concat(baseSvg1, color1, baseSvg2, color2, baseSvg3, animate_Svg4, baseSvg5);\n          attributes.animated = true;\n          animate = 'true';\n        }\n    }\n\n    attributes.SVG = string(abi.encodePacked(attributes.baseURI, str_score, postScoreSvg, attributes.status, \"</text></svg>\"));\n\n    attributes.attributesURI = string.concat(',\"attributes\":[{\"trait_type\":\"gradient\",\"value\":\"',attributes.gradient,'\"},{\"trait_type\":\"r1\",\"value\":\"',Strings.toString(attributes.color.r1),'\"},{\"trait_type\":\"g1\",\"value\":\"',\n    Strings.toString(attributes.color.g1),'\"},{\"trait_type\":\"b1\",\"value\":\"',Strings.toString(attributes.color.b1),'\"},{\"trait_type\":\"r2\",\"value\":\"',Strings.toString(attributes.color.r2),'\"},{\"trait_type\":\"g2\",\"value\":\"',\n    Strings.toString(attributes.color.g2),'\"},{\"trait_type\":\"b2\",\"value\":\"',Strings.toString(attributes.color.b2),'\"},{\"trait_type\":\"status\",\"value\":\"',attributes.status,'\"},{\"trait_type\":\"animated\",\"value\":\"',animate,'\"},{\"trait_type\":\"sign\",\"value\":\"',sign,'\"},{\"trait_type\":\"score\",\"value\":\"',str_score,'\"},{\"trait_type\":\"original score\",\"value\":\"',orig_str_score,'\"}]');\n    return attributes;\n  }\n  \n  function tokenURI(uint256 id) public view override returns (string memory) {\n    require(id < numClaimed + 1 && id != 0, \"Token does not exist\");\n    if (!removed[id]) {\n      string memory user = idToData[id].username;\n\n      Metadata memory attributes = getAttributes(id);\n    \n      string memory json = Base64.encode(\n          bytes(\n              string(\n                  abi.encodePacked(\n                      '{\"name\": \"@',user,'\", \"description\": \"Positivity Score for @',user,'\", \"image\": \"data:image/svg+xml;base64,',\n                      Base64.encode(bytes(attributes.SVG)),'\"',attributes.attributesURI,'}'\n                  )\n              )\n          )\n      );\n    \n      return string(abi.encodePacked(\"data:application/json;base64,\", json));\n    }\n    else {\n      string memory json = Base64.encode(\n          bytes(\n              string(\n                  abi.encodePacked(\n                      '{\"name\": \"Token Locked\", \"description\": \"Unfortunately, this token has been manually locked. Most likely due to a user maliciously trying to create a false score.\", \"image\": \"data:image/svg+xml;base64,',\n                      Base64.encode(bytes(lockedSvg)),'\"}'\n                  )\n              )\n          )\n      );\n      return string(abi.encodePacked(\"data:application/json;base64,\", json));\n    }\n  }\n\n  function withdraw() public onlyOwner {\n    uint balance = address(this).balance;\n    payable(msg.sender).transfer(balance);\n  }\n}"
        },
        "@openzeppelin/contracts/utils/Strings.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
        },
        "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721URIStorage.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\n\n/**\n * @dev ERC721 token with storage based token URI management.\n */\nabstract contract ERC721URIStorage is ERC721 {\n    using Strings for uint256;\n\n    // Optional mapping for token URIs\n    mapping(uint256 => string) private _tokenURIs;\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory _tokenURI = _tokenURIs[tokenId];\n        string memory base = _baseURI();\n\n        // If there is no base URI, return the token URI.\n        if (bytes(base).length == 0) {\n            return _tokenURI;\n        }\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\n        if (bytes(_tokenURI).length > 0) {\n            return string(abi.encodePacked(base, _tokenURI));\n        }\n\n        return super.tokenURI(tokenId);\n    }\n\n    /**\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\n        require(_exists(tokenId), \"ERC721URIStorage: URI set of nonexistent token\");\n        _tokenURIs[tokenId] = _tokenURI;\n    }\n\n    /**\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\n     * the storage mapping.\n     */\n    function _burn(uint256 tokenId) internal virtual override {\n        super._burn(tokenId);\n\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\n            delete _tokenURIs[tokenId];\n        }\n    }\n}\n"
        },
        "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner nor approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
        },
        "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
        },
        "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
        },
        "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
        },
        "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
        },
        "@openzeppelin/contracts/utils/Address.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
        },
        "@openzeppelin/contracts/utils/Context.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
        },
        "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
        },
        "@openzeppelin/contracts/access/Ownable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
        }
    },
    "settings": {
		"viaIR": true,
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"outputSelection": {
			"*": {
			"": ["ast"],
			"*": ["abi", "metadata", "devdoc", "userdoc", "storageLayout", "evm.legacyAssembly", "evm.bytecode", "evm.deployedBytecode", "evm.methodIdentifiers", "evm.gasEstimates", "evm.assembly"]
			}
		},
		"evmVersion": "constantinople"
	}
}